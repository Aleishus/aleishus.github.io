<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>干将的博客</title>
    <description></description>
    <link>http://zhouxi.me/</link>
    <atom:link href="http://zhouxi.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 17 Jan 2017 11:03:17 +0800</pubDate>
    <lastBuildDate>Tue, 17 Jan 2017 11:03:17 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>“高性价比科学上网&quot;</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This document is not completed and will be updated anytime.
转载请注明，谢谢&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;gfwgoogleyoutubefacebookgithubgfwnosock5shadowsock&quot;&gt;大家都知道我们我天朝有GFW（国家防火墙），不能上google，youtube，facebook，男性交友社区github也经常被墙，但是我们需要和这个世界接轨，我们需要了解外面的世界，我们要和GFW说NO。因此我为大家推荐一个性价比超高的SOCK5代理科学上网工具shadowsock。满足大多数情况下科学上网需要的同时只需要白菜的价格。&lt;/h2&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;对于广大的程序员同志来说，科学上网是必备技能，不会用google，你解决问题的效率会十分低下，经验成长的速度会很慢（不要告诉我你用baidu来解决问题:）&lt;/li&gt;
  &lt;li&gt;很对同学也许在使用xx-net，goAgent等工具，但是性能不稳定、需要添加证书、下载文件经常会断流、访问google经常要要求输入验证码、有些网站会出现反复重定向（slideshare）、使用的人数一多经常出现error等问题（我曾经也是重度的goAgent用户，但是这些问题很影响我的效率，我决定放弃）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;shadowsock&quot;&gt;下面给大家介绍今天的工具shadowsock(全平台支持)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;windows x64 版本下载 &lt;a href=&quot;/file/Shadowsocks-3.4.3.zip&quot;&gt;Shadowsocks-3.4.3.zip&lt;/a&gt; 如果启动报错，需要安装&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=53344&quot;&gt;.NET Framework 4.6.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;mac osx10.8 以上版本下载 &lt;a href=&quot;/file/ShadowsocksX-2.6.5.dmg&quot;&gt;ShadowsocksX-2.6.5.dmg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ubuntu &amp;gt;=14.04&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo add-apt-repository ppa:hzwhuang/ss-qt5
sudo apt-get update
sudo apt-get install shadowsocks-qt5
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;IOS &lt;a href=&quot;https://itunes.apple.com/app/apple-store/id1070901416?mt=8&quot;&gt;Apple Store&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Android &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.github.shadowsocks&quot;&gt;Google Pay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;智能路由器OpenWRT&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#shadowsocks-libev
opkg install shadowsocks-libev
#shadowsocks-libev-polarssl
opkg install shadowsocks-libev-polarssl
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section&quot;&gt;安装使用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;mac
找到&lt;code&gt;服务器&lt;/code&gt;设定，填入以下参数
&lt;img src=&quot;/img/1.png&quot; alt=&quot;&quot; /&gt;
开启shadowsock
&lt;img src=&quot;/img/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;windows
&lt;img src=&quot;/img/3.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/img/4.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;linux略&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt; 就这么简单，打开你的浏览器，尽情享受外面的世界吧 :)&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;效果截图&lt;/h2&gt;
&lt;p&gt;低延迟
&lt;img src=&quot;/img/5.png&quot; alt=&quot;&quot; /&gt;
秒开google
&lt;img src=&quot;/img/7.png&quot; alt=&quot;&quot; /&gt;
可看youtube720p画质
&lt;img src=&quot;/img/8.png&quot; alt=&quot;&quot; /&gt;
—&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;我要使用&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;联系我：&lt;code&gt;QQ:820421292，微信:Aleishus&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;加入QQ群:
&lt;img src=&quot;/img/qq.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 16 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://zhouxi.me/2017/01/16/shadowsock/</link>
        <guid isPermaLink="true">http://zhouxi.me/2017/01/16/shadowsock/</guid>
        
        <category>Shadowsock</category>
        
        
      </item>
    
      <item>
        <title>“全民搭建私有云&quot;</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This document is not completed and will be updated anytime.
转载请注明，谢谢&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;一些废话&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;一年之间docker火遍了大江南北，各个互联网巨头纷纷推出了自家的docker玩法。可谓是千奇百怪，花样繁多，让我们这些想跟风的小P民茫然无措，难以上手。打住！你可能觉得我在BB，docker官方不是说docker极大的简化了环境的配置和应用的交付吗？诚然，如果有台电脑装个docker然后运行几个命令跑几个docker容器确实非常简单。然而这个并没什么卵用，我们不会在生产环境的机器上装个docker然后跑几个容器吧，增加了麻烦不说，性能还不如裸机。docker真正带来的价值在于轻量级可以将容器快说部署到任何平台的机器。因此我们要玩，要上生产，要享受docker给我带来这些便利，我们就需要一个容器间能相互访问，并支持管理和调度的docker集群。但是要搭建这样一个集群可不是一件容易的事情，它涉及到网络，调度算法，操作系统，存储…总的来说太多了，要想把这些方面的细节都掌握是件特别困难的事情，各互联网巨头都拥有一个专门搞这个团队，每个人负责一块，一群人在维护。哎，写到这你可能觉得算了吧，一两个人怎么玩的起来？不要灰心，虽然我们一两个人不行，但是我们可以抱大腿，docker社区很活跃，很多成熟开源解决方案，让你能够把docker私有云玩起来。不过不是每个人都能玩起来，里面的坑实在太多，一路走来的兄弟可好！好了，废话不多说了，进入主题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;准备工作&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;既然是全民，肯定已经屏蔽很多坑，而且全平台都支持（windows，osx，linux/unix），操作简单，但是至少你要对kubernetes，docker有所了解。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#tools&quot;&gt;需要的工具&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#vagrant&quot;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#virtualbox&quot;&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#coreos&quot;&gt;下载Coreos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#install&quot;&gt;一键搭建集群&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#check&quot;&gt;检查环境&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cloud-config&quot;&gt;优雅配置启用服务&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#calico&quot;&gt;calico网络方式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#flannel&quot;&gt;flannel网络方式&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;本来我是想用Windows平台来安装做说明，但是苦于身边没有Windows机器，刚好身边有台&lt;code&gt;Centos7&lt;/code&gt;，所以下面的说明都是基于它的，这些工具都是全平台通用的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;vagrant&quot;&gt;Vagrant&lt;/h4&gt;
    &lt;p&gt; &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;是一个构建完整开发环境的工具，使用非常简单，有详细说明。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;下载安装Centos版本：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; #wget https://releases.hashicorp.com/vagrant/1.8.1/vagrant_1.8.1_x86_64.rpm
 #rpm -ivh vagrant_1.8.1_x86_64.rpm
 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;virtualbox&quot;&gt;VirtualBox&lt;/h4&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.virtualbox.org&quot;&gt;VirtualBox&lt;/a&gt;是oracle开源的虚拟机，不要钱的，放心玩。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;下载安装最新版：
  Windows，Osx，Ubuntu的版本都比较好安装基本是傻瓜式的，下面介绍Centos 7的安装方式&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; #cd /etc/yum.repos.d/
 #wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo
 #yum update
 #rpm -Uvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
 #yum install VirtualBox-5.0
 #/usr/lib/virtualbox/vboxdrv.sh setup
 #reboot
 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;注意：VirtualBox5.0需要使用cpu虚拟化技术，请在bois里面开启&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;coreos&quot;&gt;Coreos&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://coreos.com/&quot;&gt;Coreos&lt;/a&gt;是个经过裁剪，非常轻量级，占用资源极少，支持平滑升级回滚的集群操作系统，可以使用fleet轻松管理Coreos集群。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;下载coreos&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; #git clone https://github.com/Aleishus/easy-docker-cloud.git
 #cd easy-docker-cloud/coreos-vagrant/
 #vagrant up

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;完成下载之后查看状态&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  #vagrant status
   Current machine states:
     core-01                   running (virtualbox)    

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;停止虚拟机&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;#vagrant destroy  -f  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;万事都具备，下面我们就快要将私有云搭建起来了 ^ ^&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;check&quot;&gt;Check&lt;/h4&gt;

    &lt;p&gt;&lt;strong&gt;检查系统是否安装nfs服务&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt; #systemctl cat nfs-server
 # /usr/lib/systemd/system/nfs-server.service
[Unit]
Description=NFS server and services
DefaultDependencies=no
Requires= network.target proc-fs-nfsd.mount rpcbind.target
Requires= nfs-mountd.service
Wants=rpc-statd.service nfs-idmapd.service
Wants=rpc-statd-notify.service

After= local-fs.target       

...

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果没有安装请安装 &lt;code&gt;yum install nfs-utils&lt;/code&gt; , &lt;a href=&quot;http://www.iamle.com/archives/2011.html&quot;&gt;Windows 启用NFS&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;cloud-config&quot;&gt;Cloud-config&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt; 在启动之前， 我们先来看看coreos是如何优雅来控制系统服务的启动和顺序。
Coreos 整了一个叫&lt;a href=&quot;https://coreos.com/os/docs/latest/cloud-config.html&quot;&gt;Cloud-config&lt;/a&gt;的东西来自定启动的服务,使得你可以配置一个&lt;strong&gt;cloud-config.yaml&lt;/strong&gt;的文件，然后在系统启动的时候通过&lt;code&gt;coreos-cloudinit&lt;/code&gt;, 从而定义服务的依赖和启动顺序，其服务的组织模板是规范于&lt;strong&gt;systemd&lt;/strong&gt;标准的。我们查看一下 &lt;strong&gt;easy-docker-cloud/calico-kubernetes/cloud-config/master-config.yaml.tmpl&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt; - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStart=/opt/bin/kube-scheduler --master=$private_ipv4:8080 --logtostderr=true
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target

    - name: docker.service
      drop-ins:
        - name: &quot;50-registry.conf&quot;
          content: |
            [Unit]
            Before=calico-node.service
            [Service]
            Environment=DOCKER_OPTS=&#39;--insecure-registry=&quot;192.168.46.21:5000&quot;&#39;   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意为了方便下载docker镜像，使用了私有仓库&lt;strong&gt;192.168.46.21:5000&lt;/strong&gt;，你需要改成自己的（需要修改以下文件中的对应项 &lt;code&gt;*/cloud-config/master-config.yaml.tmpl&lt;/code&gt;, &lt;code&gt;*/cloud-config/node-config.yaml.tmpl&lt;/code&gt;），或者不用（GFW大家懂得）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;calico&quot;&gt;Calico&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;私有云集群要求docker容器之间能相互访问，有独立ip且ip对其他容器是可见的。&lt;a href=&quot;https://www.projectcalico.org/&quot;&gt;Calico&lt;/a&gt;通过给主机添加路由表，各主机之间通过BPG相互学习路由规则达到网络互通的目的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://64.91.234.195/~projcali/wp-content/uploads/2015/03/ip-hops1.png&quot; alt=&quot;calico flow&quot; /&gt;
&lt;img src=&quot;http://www.projectcalico.org/wp-content/uploads/2015/03/why-bgp-networks.svg&quot; alt=&quot;calico big&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt; 一键安装&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; # cd easy-docker-cloud/calico-kubernetes/
 # vagrant up
Bringing machine &#39;calico-01&#39; up with &#39;virtualbox&#39; provider...
Bringing machine &#39;calico-02&#39; up with &#39;virtualbox&#39; provider...
Bringing machine &#39;calico-03&#39; up with &#39;virtualbox&#39; provider...
==&amp;gt; calico-01: Importing base box &#39;coreos-stable&#39;...
==&amp;gt; calico-01: Matching MAC address for NAT networking...
==&amp;gt; calico-01: Checking if box &#39;coreos-stable&#39; is up to date...
==&amp;gt; calico-01: Setting the name of the VM: calico-kubernetes_calico-01_1456484431502_68953
==&amp;gt; calico-01: Fixed port collision for 22 =&amp;gt; 2222. Now on port 2202.
==&amp;gt; calico-01: Clearing any previously set network interfaces...
==&amp;gt; calico-01: Preparing network interfaces based on configuration...
    calico-01: Adapter 1: nat
    calico-01: Adapter 2: hostonly
==&amp;gt; calico-01: Forwarding ports...
    calico-01: 22 (guest) =&amp;gt; 2202 (host) (adapter 1)
==&amp;gt; calico-01: Running &#39;pre-boot&#39; VM customizations...
==&amp;gt; calico-01: Booting VM...
==&amp;gt; calico-01: Waiting for machine to boot. This may take a few minutes...
    calico-01: SSH address: 127.0.0.1:2202
    calico-01: SSH username: core
    calico-01: SSH auth method: private key
    calico-01: Warning: Remote connection disconnect. Retrying...
                                                                                                                                          
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;安装完成后&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; //查看节点运行状态
 # vagrant status
 Current machine states:

calico-01                 running (virtualbox)
calico-02                 running (virtualbox)
calico-03                 running (virtualbox) 
 
 //进入kubernetes master节点
 # vagrant ssh calico-01
CoreOS stable (835.13.0)
Update Strategy: No Reboots
core@calico-01 ~ $ kubectl get node  //查看k8s状态
NAME            LABELS                                 STATUS    AGE
172.18.18.101   kubernetes.io/hostname=172.18.18.101   Ready     1m
172.18.18.102   kubernetes.io/hostname=172.18.18.102   Ready     47s
172.18.18.103   kubernetes.io/hostname=172.18.18.103   Ready     2s
 
core@calico-01 ~ $ calicoctl status   //查看calico状态
calico-node container is running. Status: Up 2 minutes
Running felix version 1.3.0rc6

IPv4 BGP status
IP: 172.18.18.101    AS Number: 64511 (inherited)
+---------------+-------------------+-------+----------+-------------+
|  Peer address |     Peer type     | State |  Since   |     Info    |
+---------------+-------------------+-------+----------+-------------+
| 172.18.18.102 | node-to-node mesh |   up  | 11:17:18 | Established |
| 172.18.18.103 | node-to-node mesh |   up  | 11:18:03 | Established |
+---------------+-------------------+-------+----------+-------------+

IPv6 BGP status
No IPv6 address configured.                                           
 
 //创建一个pod看看
core@flannel-01 ~ $ kubectl create -f busybox.yaml
pod &quot;busybox&quot; created
core@flannel-01 ~ $ kubectl get po -o wide
NAME      READY     STATUS    RESTARTS   AGE       NODE
busybox   1/1       Running   0          6s        172.18.18.103
 
 //可以看到kubernetes和calico都正常工作了，恭喜你3节点私有云已经搭建完成
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;flannel&quot;&gt;Flannel&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/coreos/flannel&quot;&gt;Flannel&lt;/a&gt; 通过vxlan ,udp … overlay的方式行解包封包来实现容器间的ip访问，关于flannel和calico系能对比我会在以后说明&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/coreos/flannel/master/packet-01.png&quot; alt=&quot;flannel&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一键安装&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; #cd easy-docker-cloud/flannel-kubernetes
 #vagrant up
 Bringing machine &#39;flannel-01&#39; up with &#39;virtualbox&#39; provider...
Bringing machine &#39;flannel-02&#39; up with &#39;virtualbox&#39; provider...
Bringing machine &#39;flannel-03&#39; up with &#39;virtualbox&#39; provider...
==&amp;gt; flannel-01: Importing base box &#39;coreos-stable&#39;...
==&amp;gt; flannel-01: Matching MAC address for NAT networking...
==&amp;gt; flannel-01: Checking if box &#39;coreos-stable&#39; is up to date...
==&amp;gt; flannel-01: Setting the name of the VM: flannel-kubernetes_flannel-01_1456486316604_71560
==&amp;gt; flannel-01: Clearing any previously set network interfaces...
==&amp;gt; flannel-01: Preparing network interfaces based on configuration...
    flannel-01: Adapter 1: nat
    flannel-01: Adapter 2: hostonly
==&amp;gt; flannel-01: Forwarding ports...
    flannel-01: 22 (guest) =&amp;gt; 2222 (host) (adapter 1)
==&amp;gt; flannel-01: Running &#39;pre-boot&#39; VM customizations...
==&amp;gt; flannel-01: Booting VM... 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;安装完成后&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;//查看节点运行状态
 # vagrant status
 Current machine states:

flannel-01                running (virtualbox)
flannel-02                running (virtualbox)
flannel-03                running (virtualbox)   

//进入kubernetes master节点
 #vagrant ssh flannel-01
 CoreOS stable (835.13.0)
 Update Strategy: No Reboots
 core@flannel-01 ~ $ 
 core@flannel-01 ~ $ kubectl get node      //查看k8s状态
NAME            LABELS                                 STATUS    AGE
172.18.18.101   kubernetes.io/hostname=172.18.18.101   Ready     4m
172.18.18.102   kubernetes.io/hostname=172.18.18.102   Ready     3m
172.18.18.103   kubernetes.io/hostname=172.18.18.103   Ready     3m  

core@flannel-01 ~ $ etcdctl ls /coreos.com/network/subnets     //查看flannel状态
/coreos.com/network/subnets/10.1.44.0-24
/coreos.com/network/subnets/10.1.21.0-24
/coreos.com/network/subnets/10.1.23.0-24 

//创建一个pod看看
core@flannel-01 ~ $ kubectl create -f busybox.yaml
pod &quot;busybox&quot; created
core@flannel-01 ~ $ kubectl get po -o wide
NAME      READY     STATUS    RESTARTS   AGE       NODE
busybox   1/1       Running   0          6s        172.18.18.103 

//可以看到kubernetes和flannel都正常工作了，恭喜你3节点私有云已经搭建完成
                             

&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Fri, 26 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://zhouxi.me/2016/02/26/coreos-docker-k8s/</link>
        <guid isPermaLink="true">http://zhouxi.me/2016/02/26/coreos-docker-k8s/</guid>
        
        <category>Docker</category>
        
        <category>Coreos</category>
        
        <category>Flannel</category>
        
        <category>Kubernetes</category>
        
        <category>Calico</category>
        
        <category>Vagrant</category>
        
        
      </item>
    
  </channel>
</rss>
